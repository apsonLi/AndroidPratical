apply plugin: 'com.android.application'

def ALLversionCode = 1
def ALLversionName = "1.0"
android {
    compileSdkVersion 31 // 影响
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "com.zkyouxi.pratical_pro"//包名
        minSdkVersion 21
        targetSdkVersion 26
        versionCode ALLversionCode
        versionName ALLversionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
//4.56
def oldPath = 'build/outputs/apk/release/'
def newPath = '/Users/licuisong/Downloads/gradletest'
//def signedName = "signed.apk"
def packageTime = new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
task doPackageAll(type: Sync) {
//    dependsOn 'clean'
    dependsOn 'assembleRelease'//执行打包 release 包
    //签名
//    dependsOn
    dependsOn 'doPackageFirst'

}
//打包测试命令：  ./gradlew doPackageAll -P TargetPath=/Users/licuisong/Downloads/gradletest/xxa



//打包第一步
task doPackageFirst(type: Sync) {
//    println(project.properties.TargetPath)//从命令行中获取，输出打包后成品apk的存放路径
    from(oldPath)//指定成品包来源路径
    into(project.properties.TargetPath)//拷贝到目标路径
    include('*.apk')//目标路径下全部 .apk 后缀文件
    def name = packageTime + "_" + "LCS_" + ALLversionName + "_.apk"//按照需求命名文件
    rename('app-release-unsigned.apk', name)//重命名
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    >as3
//    implementation 'androidx.legacy:legacy-support-v4:1.0.0+'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation project(path: ':net')
}
